# Steps for publishing project cache

steps:
  # - bash: 'mkdir -p $(Build.StagingDirectory)'
  #   condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
  #   displayName: '[Cache][Publish] Create cache directory'

  # # continueOnError because on windows it has a permission denied error but the
  # # export succeeds.
  # - script: 'esy export-dependencies'
  #   continueOnError: true
  #   condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
  #   displayName: 'esy export-dependencies'
  #   workingDirectory: $(Agent.HomeDirectory)/hello-reason

  # - bash: pwd && ls _export/* && mv _export '$(Build.StagingDirectory)' && ls '$(Build.StagingDirectory)/_export/'
  #   condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
  #   displayName: '[Cache][Publish] move export to staging dir'
  #   workingDirectory: $(Agent.HomeDirectory)/hello-reason

  # - bash: cd $ESY__CACHE_INSTALL_PATH && tar -czf $(Build.StagingDirectory)/esy-cache.tar .
  #   workingDirectory: ''
  #   condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
  #   displayName: '[Cache][Publish] Tar esy cache directory'
  # - bash: 'cd $(ESY__NPM_ROOT) && tar -czf $(Build.StagingDirectory)/npm-cache.tar .'
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch']))
  #   displayName: '[Cache][Publish] Tar npm cache directory'

  - bash: 'mkdir -p $(Build.StagingDirectory)'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    displayName: '[Cache][Publish] Create cache directory'

  - bash: 'mkdir -p _export'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    displayName: '[Cache][Publish] Create cache directory'
    workingDirectory: $(Build.StagingDirectory)

  - bash: 'echo test > file.txt'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    displayName: '[Cache][Publish] Create cache directory'
    workingDirectory: $(Build.StagingDirectory)/_export


  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.StagingDirectory)/_export/'
      includeRootFolder: false
      archiveType: 'zip'
      #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
      archiveFile: '$(Build.StagingDirectory)/checksum.zip'
      #replaceExistingArchive: true
      #verbose: # Optional
      #quiet: # Optional

  - bash: 'ls'
    displayName: 'ls'
    workingDirectory: $(Build.StagingDirectory)

  # - script: 'node .ci-self/checksum.js checksum.zip > checksum.txt'
  #   displayName: 'Calculating sha1'
  #   workingDirectory: $(Build.StagingDirectory)
  #   continueOnError: true

  # - bash: 'shasum checksum.zip'
  #   displayName: 'Calculating sha1 bis'
  #   workingDirectory: $(Build.StagingDirectory)
  #   continueOnError: true

  - bash: 'sha1sum checksum.zip | cut -d " " -f 1'
    displayName: 'Calculating sha1sum'
    workingDirectory: $(Build.StagingDirectory)
    continueOnError: true

  - bash: 'sha1sum checksum.zip | cut -d " " -f 1 > checksum.txt'
    displayName: 'Calculating sha1sum file'
    workingDirectory: $(Build.StagingDirectory)
    continueOnError: true

  # - bash: |
  #     sha=($(shasum checksum.zip)); echo $sha;
  #   displayName: 'Calculating sha1 bis2'
  #   workingDirectory: $(Build.StagingDirectory)
  #   continueOnError: true

  - bash: 'ls'
    displayName: 'ls'
    workingDirectory: $(Build.StagingDirectory)

  - task: PublishBuildArtifacts@1
    displayName: '[Cache][Publish] Upload tarball'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    # TODO: The CI Build caches are pulled down by the last successful buildID
    # for the target branch.
    inputs:
      pathToPublish: '$(Build.StagingDirectory)/_export'
      artifactName: 'cache-$(Agent.OS)-install-$(esy__ci_cache_version)'
      parallel: true
      parallelCount: 8

  - task: PublishBuildArtifacts@1
    displayName: '[Cache][Publish] checksum'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    # TODO: The CI Build caches are pulled down by the last successful buildID
    # for the target branch.
    inputs:
      pathToPublish: '$(Build.StagingDirectory)/checksum.txt'
      artifactName: 'cache-$(Agent.OS)-install-$(esy__ci_cache_version)-checksum'
      parallel: true
      parallelCount: 8

  - bash: 'ls'
    displayName: 'ls'
    workingDirectory: $(Build.StagingDirectory)

  - task: DeleteFiles@1
    inputs:
      SourceFolder: $(Build.StagingDirectory)
      Contents: |
        checksum.zip
        checksum.txt

  - bash: 'ls'
    displayName: 'ls'
    workingDirectory: $(Build.StagingDirectory)
